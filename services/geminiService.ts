
import { GoogleGenAI } from "@google/genai";
import { Course } from "../types";

// Assume API_KEY is set in the environment
const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  // In a real app, you'd have a more robust way of handling this,
  // but for this environment we will mock a response.
  console.warn("API_KEY environment variable not set. Using mocked Gemini service.");
}

const ai = API_KEY ? new GoogleGenAI({ apiKey: API_KEY }) : null;

interface TutorContext {
  courseTitle: string;
  chapterTitle: string;
  videoTitle: string;
}

export const getAITutorResponse = async (context: TutorContext, question: string): Promise<string> => {
  const prompt = `
    You are an expert tutor for "Chhatrapati Business Vision Academy".
    Your role is to help students understand concepts better.
    Be encouraging, clear, and concise.

    Current Learning Context:
    - Course: ${context.courseTitle}
    - Chapter: ${context.chapterTitle}
    - Video: ${context.videoTitle}

    Student's Question: "${question}"

    Your Answer (in markdown format):
  `;

  if (!ai) {
    // Mocked response for environment without API key
    return new Promise(resolve => {
      setTimeout(() => {
        resolve(`This is a mocked AI response regarding "${question}" in the context of "${context.videoTitle}". In a real environment with a Gemini API key, I would provide a detailed and helpful explanation.`);
      }, 1500);
    });
  }

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: prompt,
    });
    return response.text;
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    return "I'm sorry, I'm having trouble connecting to my knowledge base right now. Please try again in a moment.";
  }
};

export const getCourseSummary = async (course: Course): Promise<string> => {
  const chapterTitles = course.chapters.map(c => `- ${c.title}`).join('\n');
  const prompt = `
    You are an expert course advisor for "Chhatrapati Business Vision Academy".
    Generate a concise, bulleted summary for the following course to help a potential student understand its key learning outcomes.
    Keep it to 3-5 key bullet points.

    Course Title: ${course.title}
    Course Description: ${course.description}
    Course Chapters:
    ${chapterTitles}

    Your Summary (in markdown format, using '*' for bullets):
  `;

   if (!ai) {
    return new Promise(resolve => {
      setTimeout(() => {
        resolve(`* This is a mocked AI summary for "${course.title}".\n* It highlights the key benefits and learning outcomes.\n* In a real app, this would be a dynamic summary generated by Gemini.`);
      }, 1500);
    });
  }

  try {
     const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: prompt,
    });
    return response.text;
  } catch (error) {
    console.error("Error calling Gemini API for summary:", error);
    return "Could not generate summary at this time.";
  }
};
